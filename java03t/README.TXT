[step01]
- 단순한 Client/Server 만들기

[step02]
- 여러 클라이언트 요청을 처리하기
- 문제점
  1) 한 번 연결이 되면 클라이언트에서 연결을 끊을 때까지
     계속 연결된 상태로 있다.
     => 서버 쪽 메모리 낭비.
  2) 클라이언트 요청을 순차적으로 처리한다.
     => 서버 자원을 최대로 활용할 수 없다.
     
[step03]
- 클라이언트 요청을 순차적으로 처리하는 문제 해결
  => 멀티 스레드 적용: BoardSkel 클래스 생성
  
[step04]
- 한 번 연결이 되면 클라이언트가 끊을 때까지 유지되는 문제
  => 속도가 떨어지더라도 좀 더 많은 클라이언트 요청 처리.
- 연결 방식
  1) Connectionful(stateful)
  연결 -> 요청 -> 응답 -> 요청 -> 응답 -> ... -> 끊기
  => 예) FTP, 아프리카TV, 채팅
  => 장점: 연결되어 있는 동안 클라이언트 정보를 계속 유지.
  => 단점: 메모리 낭비  
   
  2) Connectionless(Stateless)
  연결 -> 요청 -> 응답 -> 끊기 
  => 예) HTTP, 메신저    
  => 단점: 요청할 때마다 연결한다.
  => 장점: 더 많은 클라이언트 요청 처리.












