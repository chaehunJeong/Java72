[step01]
Test01.java
  - 클래스 사용
  - 패키지 이름 지정
  - import 사용
  - 클래스에 묶여 있는 메서드 사용
    - 데이터가 필요없는 메서드(클래스 메서드, 스태틱 메서드)
    - 데이터가 필요한 메서드(인스턴스 메서드)
    
Test02.java    
  - 데이터 준비 = 인스턴스 준비 
    - new 명령어 사용
    - 메서드를 호출 => 데이터 준비 과정이 복잡한 경우, 복잡함을 감추기 위해서.
    
Test03.java
  - 클래스 만들기
    - 데이터가 필요로 하지 않는 "클래스 메서드" 정의 => Calc.java    

Test04.java
  - 클래스 만들기
    - 클래스 변수(스태틱 변수) 활용 

Test05.java
  - 클래스 만들기
    - 인스턴스 변수 활용
    - 데이터를 개별적으로 관리하고 싶다면 인스턴스 변수로 만들어라.
      => 인스턴스마다 별개로 데이터를 관리한다.

Test06.java      
  - 클래스 만들기
    - 데이터를 필요로 하는 "인스턴스 메서드" 정의 => Calc.java   
    
Test07.java
  - static 블록
  - 인스턴스 블록과 생성자의 호출 순서
  - 익명 이너 클래스와 인스턴스 블록

Test08.java
  - 오버로딩
    - 같은 기능을 하는 메서드에 대해 같은 이름을 부여하여 프로그래밍의 일관성을 확보하자.

Test09.java
  - 프로퍼티 = 셋터 메서드 - (set 또는 get) + (첫 알파벳을 소문자로)
  - 프로퍼티는 인스턴스 변수가 아니다!
  
[step02] -----------------------------------------------------
Test01.java
  - Object 클래스 분석              
    
Test02.java
  - ArrayList 사용
  
Test03.java
  - HashSet 사용
  - hashCode(), equals() 재정의
  
Test04.java
  - Object.equals() 의미

Test05.java
  - HashMap 사용

Test06.java
  - 키 클래스를 만들기
  - 키로 사용할 클래스는 반드시 hashCode()와 equals()를 오버라이딩하라!

Test07.java
  - 랩퍼 클래스의 활용
  - boxing, unboxing => auto-boxing  
    
[step03]
Test01.java
  - 셋터 메서드에 체이닝 호출 적용     

Test02.java
  - Class 클래스를 사용한 객체 생성     
    
    
    
    
    
    
    
    
    
    
    