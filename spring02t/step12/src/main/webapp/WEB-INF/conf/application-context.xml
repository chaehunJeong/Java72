<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

  <context:component-scan base-package="study"/>
  
  <!-- @Transactional 애노테이션을 처리할 BeanPostProcessor 등록하기 -->
  <tx:annotation-driven transaction-manager="txManager"/>
  
  <!-- 멀티파트 데이터를 처리할 객체를 준비한다. -->
  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="2000000"/>
	</bean>
	
	<!-- SqlSessionFactory 객체 생성하라! -->
  <bean id="sqlSessionFactory" 
        class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="typeAliasesPackage" 
        value="study.vo" />
    <property name="mapperLocations" 
        value="classpath*:study/dao/*Dao.xml"/>
  </bean>
  
  <!-- mybatis-config.xml의 데이터소스 부분을 대체 -->
  <bean id="dataSource" 
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" 
        value="com.mysql.jdbc.Driver"/>
    <property name="url" 
        value="jdbc:mysql://localhost:3306/java72db"/>
    <property name="username" value="java72"/>
    <property name="password" value="java72"/>
  </bean>
  
  <!-- 스프링의 트랜잭션 관리자 등록 -->
  <bean id="txManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  
  <!-- 트랜잭션 정책을 설정하기 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
  </tx:advice>
  
  <!-- 트랜잭션을 적용할 클래스나 메서드를 설정한다. -->
	<aop:config>
	  <!-- 적용할 클래스나 메서드 정의 -->
		<aop:pointcut id="serviceOperation"
			expression="execution(* study.service..*Service.*(..))" />
	  
	  <!-- 트랜잭션 규칙을 적용 -->
		<aop:advisor pointcut-ref="serviceOperation" 
		             advice-ref="txAdvice" />
	</aop:config>
</beans>






