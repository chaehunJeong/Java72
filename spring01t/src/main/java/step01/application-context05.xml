<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
  
  <bean id="c1" class="step01.Car"/>
  
  <!-- 값의 타입을 <value>에서 지정하기
        스프링은 그 값의 타입과 가장 일치하는 
        생성자를 찾아서 호출한다.
   -->
  <bean id="c2" class="step01.Car">
    <constructor-arg>
      <value type="java.lang.String">티코</value>
    </constructor-arg>
  </bean>
  
  <bean id="c3" class="step01.Car">
    <constructor-arg>
      <value type="int">800</value>
    </constructor-arg>
  </bean>
  
  <!-- 생성자 파라미터의 타입을 <constructor-arg>에서
       지정할 수 있다. -->
  <bean id="c4" class="step01.Car">
    <constructor-arg type="java.lang.String">
      <value>티코</value>
    </constructor-arg>
  </bean>
  
  <bean id="c5" class="step01.Car">
    <constructor-arg type="int">
      <value>800</value>
    </constructor-arg>
  </bean>
  
  <!-- 파라미터의 타입 또는 값의 타입을 생략하면
       그 값의 타입과 가장 가까운 생성자를 호출한다. 
       String 먼저 탐색한다.-->
  <bean id="c6" class="step01.Car">
    <constructor-arg>
      <value>800</value>
    </constructor-arg>
  </bean>

  
  <!-- 값의 타입과 일치하는 생성자가 여러 개일 경우,
       스프링 정책에 적절한 생성자가 자동으로 선택된다. -->
  <bean id="c7" class="step01.Car">
    <constructor-arg>
      <value type="java.lang.String">티코</value>
    </constructor-arg>
    <constructor-arg>
      <value type="int">800</value>
    </constructor-arg>
  </bean>
  
  <bean id="c8" class="step01.Car">
    <constructor-arg type="java.lang.String">
      <value>티코</value>
    </constructor-arg>
    <constructor-arg type="int">
      <value>800</value>
    </constructor-arg>
  </bean>
  
  <bean id="c9" class="step01.Car">
    <constructor-arg type="int">
      <value>800</value>
    </constructor-arg>
    <constructor-arg type="java.lang.String">
      <value>티코</value>
    </constructor-arg>
  </bean>
  
  <!-- 파라미터의 순서를 명확히 지정하고 싶다면,
       index 속성을 사용하여 파라미터 순서를 지정하라.
       추천! -->
  <bean id="c10" class="step01.Car">
    <constructor-arg index="0">
      <value type="java.lang.String">티코</value>
    </constructor-arg>
    <constructor-arg index="1">
      <value type="int">800</value>
    </constructor-arg>
  </bean>
  <bean id="c11" class="step01.Car">
    <constructor-arg index="1">
      <value type="java.lang.String">티코</value>
    </constructor-arg>
    <constructor-arg index="0">
      <value type="int">800</value>
    </constructor-arg>
  </bean>
  
  <!-- 값을 지정할 때 <value> 대신
       <constructor-arg>의 value 속성을 사용할 수 있다. -->
  <bean id="c12" class="step01.Car">
    <constructor-arg type="java.lang.String" 
         value="티코"/>
  </bean>
  <bean id="c13" class="step01.Car">
    <constructor-arg type="int" value="900"/>
  </bean>
  <bean id="c14" class="step01.Car">
    <constructor-arg type="java.lang.String" 
        value="티코" index="0"/>
    <constructor-arg type="int" value="900" index="1"/>
  </bean>
</beans>






